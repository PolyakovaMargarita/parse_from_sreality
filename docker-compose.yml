version: '3'
services:
  client:
    container_name: react-test-client
    build:
      context: ./client/
      dockerfile: Dockerfile
    networks:
      - 'web'


  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - client
    networks:
      - 'web'

  postgres:
    container_name: postgres-test-db
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - 'web'

  server:
    container_name: node-test-server
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    networks:
      - 'web'
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - postgres
    command: sh -c "until pg_isready -h postgres -p 5432; do sleep 1; done && npx sequelize-cli db:migrate && npm start"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  web:
    driver: bridge